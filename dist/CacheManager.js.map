{"version":3,"sources":["../src/CacheManager.js"],"names":["BASE_DIR","FileSystem","cacheDirectory","CacheEntry","uri","options","getCacheEntry","path","exists","tmpPath","createDownloadResumable","downloadAsync","result","status","undefined","moveAsync","from","to","CacheManager","entries","deleteAsync","idempotent","makeDirectoryAsync","getInfoAsync","size","filename","substring","lastIndexOf","indexOf","length","ext","_","uniqueId","info"],"mappings":"ghBACA,iDACA,0BACA,2DAOA,GAAMA,CAAAA,QAAQ,CAAMC,iBAAWC,cAAjB,oBAAd,C,GAEaC,CAAAA,U,YAMT,oBAAYC,GAAZ,CAAyBC,OAAzB,CAAmD,+CAC/C,KAAKD,GAAL,CAAWA,GAAX,CACA,KAAKC,OAAL,CAAeA,OAAf,CACH,C,gPAGUD,G,CAAgB,I,CAAhBA,G,CAAKC,O,CAAW,I,CAAXA,O,mDAC0BC,aAAa,CAACF,GAAD,C,4BAA5CG,I,MAAAA,I,CAAMC,M,MAAAA,M,CAAQC,O,MAAAA,O,KACjBD,M,yDACOD,I,4DAEUN,iBAAWS,uBAAX,CAAmCN,GAAnC,CAAwCK,OAAxC,CAAiDJ,OAAjD,EAA0DM,aAA1D,E,UAAfC,M,oBAEFA,MAAM,EAAIA,MAAM,CAACC,MAAP,GAAkB,G,2DACrBC,S,6DAELb,iBAAWc,SAAX,CAAqB,CAAEC,IAAI,CAAEP,OAAR,CAAiBQ,EAAE,CAAEV,IAArB,CAArB,C,0CACCA,I,sHAIMW,CAAAA,Y,gKAINd,G,CAAaC,O,CAAsC,CAC1D,GAAI,CAACa,YAAY,CAACC,OAAb,CAAqBf,GAArB,CAAL,CAAgC,CAC5Bc,YAAY,CAACC,OAAb,CAAqBf,GAArB,EAA4B,GAAID,CAAAA,UAAJ,CAAeC,GAAf,CAAoBC,OAApB,CAA5B,CACH,CACD,MAAOa,CAAAA,YAAY,CAACC,OAAb,CAAqBf,GAArB,CAAP,CACH,C,2NAGSH,iBAAWmB,WAAX,CAAuBpB,QAAvB,CAAiC,CAAEqB,UAAU,CAAE,IAAd,CAAjC,C,4DACApB,iBAAWqB,kBAAX,CAA8BtB,QAA9B,C,iSAGeC,iBAAWsB,YAAX,CAAwBvB,QAAxB,CAAkC,CAACwB,IAAI,CAAE,IAAP,CAAlC,C,8BAAdA,I,OAAAA,I,kCACAA,I,0GAjBMN,Y,CAEVC,O,CAAyC,E,CAmBpD,GAAMb,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAOF,GAAP,uKACZqB,QADY,CACDrB,GAAG,CAACsB,SAAJ,CAActB,GAAG,CAACuB,WAAJ,CAAgB,GAAhB,CAAd,CAAoCvB,GAAG,CAACwB,OAAJ,CAAY,GAAZ,IAAqB,CAAC,CAAtB,CAA0BxB,GAAG,CAACyB,MAA9B,CAAuCzB,GAAG,CAACwB,OAAJ,CAAY,GAAZ,CAA3E,CADC,CAEZE,GAFY,CAENL,QAAQ,CAACG,OAAT,CAAiB,GAAjB,IAA0B,CAAC,CAA3B,CAA+B,MAA/B,CAAwCH,QAAQ,CAACC,SAAT,CAAmBD,QAAQ,CAACE,WAAT,CAAqB,GAArB,CAAnB,CAFlC,CAGZpB,IAHY,IAGFP,QAHE,CAGS,iBAAKI,GAAL,CAHT,CAGqB0B,GAHrB,CAIZrB,OAJY,IAICT,QAJD,CAIY,iBAAKI,GAAL,CAJZ,KAIyB2B,CAAC,CAACC,QAAF,EAJzB,CAIwCF,GAJxC,qEAOR7B,iBAAWqB,kBAAX,CAA8BtB,QAA9B,CAPQ,wJAWCC,iBAAWsB,YAAX,CAAwBhB,IAAxB,CAXD,UAWZ0B,IAXY,gBAYXzB,MAZW,CAYDyB,IAZC,CAYXzB,MAZW,kCAaX,CAAEA,MAAM,CAANA,MAAF,CAAUD,IAAI,CAAJA,IAAV,CAAgBE,OAAO,CAAPA,OAAhB,CAbW,oEAAtB","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport {FileSystem} from \"expo\";\nimport SHA1 from \"crypto-js/sha1\";\n\nexport type DownloadOptions = {\n  md5?: boolean,\n  headers?: { [string]: string }\n};\n\nconst BASE_DIR = `${FileSystem.cacheDirectory}expo-image-cache/`;\n\nexport class CacheEntry {\n\n    uri: string;\n    options: DownloadOptions;\n    path: string;\n\n    constructor(uri: string, options: DownloadOptions) {\n        this.uri = uri;\n        this.options = options;\n    }\n\n    async getPath(): Promise<?string> {\n        const {uri, options} = this;\n        const {path, exists, tmpPath} = await getCacheEntry(uri);\n        if (exists) {\n            return path;\n        }\n        const result = await FileSystem.createDownloadResumable(uri, tmpPath, options).downloadAsync();\n        // If the image download failed, we don't cache anything\n        if (result && result.status !== 200) {\n            return undefined;\n        }\n        await FileSystem.moveAsync({ from: tmpPath, to: path });\n        return path;\n    }\n}\n\nexport default class CacheManager {\n\n    static entries: { [uri: string]: CacheEntry } = {};\n\n    static get(uri: string, options: DownloadOptions): CacheEntry {\n        if (!CacheManager.entries[uri]) {\n            CacheManager.entries[uri] = new CacheEntry(uri, options);\n        }\n        return CacheManager.entries[uri];\n    }\n\n    static async clearCache(): Promise<void> {\n        await FileSystem.deleteAsync(BASE_DIR, { idempotent: true });\n        await FileSystem.makeDirectoryAsync(BASE_DIR);\n    }\n    static async getCacheSize(): Promise<number> {\n        const {size} = await FileSystem.getInfoAsync(BASE_DIR, {size: true});\n        return size;\n    }\n}\n\nconst getCacheEntry = async (uri: string): Promise<{ exists: boolean, path: string, tmpPath: string }> => {\n    const filename = uri.substring(uri.lastIndexOf(\"/\"), uri.indexOf(\"?\") === -1 ? uri.length : uri.indexOf(\"?\"));\n    const ext = filename.indexOf(\".\") === -1 ? \".jpg\" : filename.substring(filename.lastIndexOf(\".\"));\n    const path = `${BASE_DIR}${SHA1(uri)}${ext}`;\n    const tmpPath = `${BASE_DIR}${SHA1(uri)}-${_.uniqueId()}${ext}`;\n    // TODO: maybe we don't have to do this every time\n    try {\n        await FileSystem.makeDirectoryAsync(BASE_DIR);\n    } catch (e) {\n        // do nothing\n    }\n    const info = await FileSystem.getInfoAsync(path);\n    const {exists} = info;\n    return { exists, path, tmpPath };\n};\n"],"file":"CacheManager.js"}