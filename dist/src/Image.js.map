{"version":3,"sources":["../../src/Image.js"],"names":["Image","mounted","state","uri","undefined","intensity","Animated","Value","options","CacheManager","get","getPath","path","setState","load","props","prevProps","prevState","preview","transitionDuration","timing","duration","toValue","useNativeDriver","Platform","OS","start","style","defaultSource","tint","otherProps","hasDefaultSource","hasPreview","isImageReady","opacity","interpolate","inputRange","outputRange","computedStyle","StyleSheet","absoluteFill","_","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","backgroundColor","black","white","React","Component","defaultProps","AnimatedBlurView","createAnimatedComponent","BlurView"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport {Image as RNImage, Animated, StyleSheet, View, Platform} from \"react-native\";\nimport {BlurView} from \"expo\";\nimport { type ____ImageStyleProp_Internal as ImageStyle } from \"react-native/Libraries/StyleSheet/StyleSheetTypes\";\nimport type {ImageSourcePropType} from \"react-native/Libraries/Image/ImageSourcePropType\";\n\nimport CacheManager, {type DownloadOptions} from \"./CacheManager\";\n\ntype ImageProps = {\n    style?: ImageStyle,\n    defaultSource?: ImageSourcePropType,\n    preview?: ImageSourcePropType,\n    options?: DownloadOptions,\n    uri: string,\n    transitionDuration?: number,\n    tint?: \"dark\" | \"light\"\n};\n\ntype ImageState = {\n    uri: ?string,\n    intensity: Animated.Value\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n\n    mounted = true;\n\n    static defaultProps = {\n        transitionDuration: 300,\n        tint: \"dark\"\n    };\n\n    state = {\n        uri: undefined,\n        intensity: new Animated.Value(100)\n    };\n\n    async load({uri, options = {}}: ImageProps): Promise<void> {\n        if (uri) {\n            const path = await CacheManager.get(uri, options).getPath();\n            if (this.mounted) {\n                this.setState({ uri: path });\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.load(this.props);\n    }\n\n    componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n        const {preview, transitionDuration} = this.props;\n        const {uri, intensity} = this.state;\n        if (this.props.uri !== prevProps.uri) {\n            this.load(this.props);\n        } else if (uri && preview && prevState.uri === undefined) {\n            Animated.timing(intensity, {\n                duration: transitionDuration,\n                toValue: 0,\n                useNativeDriver: Platform.OS === \"android\"\n            }).start();\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    render(): React.Node {\n        const {preview, style, defaultSource, tint, ...otherProps} = this.props;\n        const {uri, intensity} = this.state;\n        const hasDefaultSource = !!defaultSource;\n        const hasPreview = !!preview;\n        const isImageReady = !!uri;\n        const opacity = intensity.interpolate({\n            inputRange: [0, 100],\n            outputRange: [0, 0.5]\n        });\n        const computedStyle = [\n            StyleSheet.absoluteFill,\n            _.transform(\n                _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n                // $FlowFixMe\n                (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n            )\n        ];\n        return (\n            <View {...{style}}>\n                {\n                    (hasDefaultSource && !hasPreview && !isImageReady) && (\n                        <RNImage\n                            source={defaultSource}\n                            style={computedStyle}\n                            {...otherProps}\n                        />\n                    )\n                }\n                {\n                    hasPreview && (\n                        <RNImage\n                            source={preview}\n                            resizeMode=\"cover\"\n                            style={computedStyle}\n                            blurRadius={Platform.OS === \"android\" ? 0.5 : 0}\n                        />\n                    )\n                }\n                {\n                    isImageReady && (\n                        <RNImage\n                            source={{ uri }}\n                            style={computedStyle}\n                            {...otherProps}\n                        />\n                    )\n                }\n                {\n                    hasPreview && Platform.OS === \"ios\" && (\n                        <AnimatedBlurView style={computedStyle} {...{intensity, tint}} />\n                    )\n                }\n                {\n                    hasPreview && Platform.OS === \"android\" && (\n                        <Animated.View\n                            style={[computedStyle, { backgroundColor: tint === \"dark\" ? black : white, opacity }]}\n                        />\n                    )\n                }\n            </View>\n        );\n    }\n}\n\nconst black = \"black\";\nconst white = \"white\";\nconst propsToCopy = [\n    \"borderRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\"\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"],"file":"Image.js"}